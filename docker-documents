# docker-registry
how to create docker registry

for doing this u need to run just a few command
we do this toturials on ubuntu 18.04

Install Docker on Ubuntu Using Default Repositories

Step 1: Update Software Repositories
$ sudo apt-get update

Step 2: Uninstall Old Versions of Docker
$ sudo apt-get remove docker docker-engine docker.io

Step 3: Install Docker
$ sudo apt install docker.io

Step 4: Start and Automate Docker

$ sudo systemctl start docker
$ sudo systemctl enable docker

============================================================================================================================
 # Installing and Configuring the Docker Registry
$ mkdir ~/docker-registry && cd $_
$ mkdir data
$ nano docker-compose.yml

 version: '3'

services:
  registry:
    image: registry:2
    ports:
    - "5000:5000"
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
    volumes:
      - ./data:/data
      
  
    
$ docker-compose up
 
============================================================================================================================ 
 installing nginx
 
$ apt install nginx
$ sudo nano /etc/nginx/sites-available/example.com
...
location / {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
    if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
      return 404;
    }

    proxy_pass                          http://YOURDOMAIN:5000;
    proxy_set_header  Host              $http_host;   # required for docker client's sake
    proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_read_timeout                  900;
}
...


$ sudo service nginx restart
$ cd ~/docker-registry
$ docker-compose up

In a browser window, open up the following url:

https://example.com/v2
You will see an empty JSON object, or:

In your terminal, you'll see output similar to the following:

Output of docker-compose up
registry_1  | time="2018-11-07T17:57:42Z" level=info msg="response completed" go.version=go1.7.6 http.request.host=cornellappdev.com http.request.id=a8f5984e-15e3-4946-9c40-d71f8557652f http.request.method=GET http.request.remoteaddr=128.84.125.58 http.request.uri="/v2/" http.request.useragent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7" http.response.contenttype="application/json; charset=utf-8" http.response.duration=2.125995ms http.response.status=200 http.response.written=2 instance.id=3093e5ab-5715-42bc-808e-73f310848860 version=v2.6.2
registry_1  | 172.18.0.1 - - [07/Nov/2018:17:57:42 +0000] "GET /v2/ HTTP/1.0" 200 2 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7"{}

============================================================================================================================
============================================================================================================================
Starting Docker Registry as a Service
You want to ensure that your registry will start whenever the system boots up. If there are any unforeseen system crashes, you want to make sure the registry restarts when the server reboots. Open up docker-compose.yml:

$ nano docker-compose.yml
Add the following line of content under registry::

docker-compose.yml
...
  registry:
    restart: always
...
You can start your registry as a background process, which will allow you to exit the ssh session and persist the process:

$ docker-compose up -d

With your registry running in the background, you can now prepare Nginx for file uploads

============================================================================================================================
============================================================================================================================
 
 Increasing File Upload Size for Nginx 
 
$ sudo nano /etc/nginx/nginx.conf
Find the http section, and add the following line:


/etc/nginx/nginx.conf
...
http {
        client_max_body_size 2000M;
        ...
}
...


Finally, restart Nginx to apply the configuration changes:

$ sudo service nginx restart

=============================================================================================================================




